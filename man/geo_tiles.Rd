% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geo_tiles.R
\name{geo_tiles}
\alias{geo_tiles}
\title{Create a regular tiling \code{geom}}
\usage{
geo_tiles(
  extent = NULL,
  width = NULL,
  pattern = "squared",
  centroids = FALSE,
  origin = "bottomleft"
)
}
\arguments{
\item{extent}{\link[=data.frame]{data.frame(2)}\cr Coordinates of the extent within
which to build the tiles from. It must include the column names \code{x}
and \code{y}.}

\item{width}{\link[=numeric]{numeric(1)}\cr the width (which does not correspond to
the height in case of \code{pattern = "hexagonal"}) of a tile.}

\item{pattern}{\link[=character]{character(1)}\cr pattern of the tiling. Possible
options are \code{"squared"} (default) or \code{"hexagonal"}.}

\item{centroids}{\link[=logical]{logical(1)}\cr should the centroids of the tiling
be returned (\code{TRUE}) or should the tiling be returned (\code{FALSE},
default)?}

\item{origin}{from which of the four corners to start numbering features?
Options are \code{topleft}, \code{bottomleft} (default), \code{topright}
and \code{bottomright}.}
}
\value{
A \code{geom}.
}
\description{
Create a regular tiling polygon geometry for the extent of an crds value.
}
\details{
When deriving a regular tiling for a prescribed window, there is
only a limited set of legal combinations of cells in x and y dimension. For
instance, a window of 100 by 100 can't comprise 10 by 5 squares of
side-length/width 10, because then the y-dimension wouldn't be fully
covered. The same is true for hexagonal and triangular tilings.
}
\examples{
# create a squared tiling
tileExt <- data.frame(x = c(-180, 180),
                      y = c(-60, 80))
tiles <- geo_tiles(extent = tileExt, width = 10)
geo_vis(`10Â° world tiles` = tiles)

# create a hexagonal tiling on top of a geom
coords <- data.frame(x = c(40, 70, 70, 50),
                     y = c(40, 40, 60, 70))
window <- data.frame(x = c(0, 80),
                     y = c(0, 80))

aGeom <- geo_polygon(crds = coords, window = window)
geo_vis(`honeycomb background` = aGeom)

hex <- geo_tiles(extent = geomio::getExtent(aGeom), width = 8, pattern = "hexagonal")
geo_vis(hex, linecol = "deeppink", new = FALSE)
}
\seealso{
Other tilings: 
\code{\link{geo_voronoi}()}
}
\concept{tilings}
